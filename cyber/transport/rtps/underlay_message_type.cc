// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file UnderlayMessageTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include "cyber/transport/rtps/underlay_message_type.h"

#include "fastcdr/Cdr.h"
#include "fastcdr/FastBuffer.h"

#include "cyber/common/log.h"

namespace apollo {
namespace cyber {
namespace transport {

UnderlayMessageType::UnderlayMessageType() {
  setName("UnderlayMessage");
  m_typeSize = (uint32_t)UnderlayMessage::getMaxCdrSerializedSize() +
               4 /*encapsulation*/;
  m_isGetKeyDefined = UnderlayMessage::isKeyDefined();
  m_keyBuffer =
      (unsigned char*)malloc(UnderlayMessage::getKeyMaxCdrSerializedSize() > 16
                                 ? UnderlayMessage::getKeyMaxCdrSerializedSize()
                                 : 16);
}

UnderlayMessageType::~UnderlayMessageType() {
  if (m_keyBuffer != nullptr) {
    free(m_keyBuffer);
  }
}

bool UnderlayMessageType::serialize(void* data, SerializedPayload_t* payload) {
  UnderlayMessage* p_type = reinterpret_cast<UnderlayMessage*>(data);
  eprosima::fastcdr::FastBuffer fastbuffer(
      reinterpret_cast<char*>(payload->data),
      payload->max_size);  // Object that manages the raw buffer.
  eprosima::fastcdr::Cdr ser(
      fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
      eprosima::fastcdr::Cdr::DDS_CDR);  // Object that serializes the data.
  payload->encapsulation =
      ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE
                                                                 : CDR_LE;
  // Serialize encapsulation
  ser.serialize_encapsulation();
  p_type->serialize(ser);  // Serialize the object:
  payload->length =
      (uint32_t)ser.getSerializedDataLength();  // Get the serialized length
  return true;
}

bool UnderlayMessageType::deserialize(SerializedPayload_t* payload,
                                      void* data) {
  UnderlayMessage* p_type = reinterpret_cast<UnderlayMessage*>(
      data);  // Convert DATA to pointer of your type
  eprosima::fastcdr::FastBuffer fastbuffer(
      reinterpret_cast<char*>(payload->data),
      payload->length);  // Object that manages the raw buffer.
  eprosima::fastcdr::Cdr deser(
      fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
      eprosima::fastcdr::Cdr::DDS_CDR);  // Object that deserializes the data.
  // Deserialize encapsulation.
  deser.read_encapsulation();
  payload->encapsulation =
      deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE
                                                                   : CDR_LE;
  p_type->deserialize(deser);  // Deserialize the object:
  return true;
}

std::function<uint32_t()> UnderlayMessageType::getSerializedSizeProvider(
    void* data) {
  return [data]() -> uint32_t {
    return (uint32_t)type::getCdrSerializedSize(
               *static_cast<UnderlayMessage*>(data)) +
           4 /*encapsulation*/;
  };
}

void* UnderlayMessageType::createData() {
  return reinterpret_cast<void*>(new UnderlayMessage());
}

void UnderlayMessageType::deleteData(void* data) {
  delete (reinterpret_cast<UnderlayMessage*>(data));
}

/*begin of native MD5*/
typedef struct
{
    unsigned int total[2];
    unsigned int state[4];
    unsigned char buffer[64];

    unsigned char ipad[64];
    unsigned char opad[64];
} md5_ctx_t;

static void __zeroize(void* v, unsigned int n)
{
    volatile unsigned char* p = (volatile unsigned char*) v;
    while (n--) {
        *p++ = 0;
    }
}

#define DGET_UINT32_LE(n, b, i) \
{                                                       \
    (n) = ( (unsigned int) (b)[(i)    ]       )             \
        | ( (unsigned int) (b)[(i) + 1] <<  8 )             \
        | ( (unsigned int) (b)[(i) + 2] << 16 )             \
        | ( (unsigned int) (b)[(i) + 3] << 24 );            \
}

#define DPUT_UINT32_LE(n, b, i) \
{                                                               \
    (b)[(i)    ] = (unsigned char) ( ( (n)       ) & 0xFF );    \
    (b)[(i) + 1] = (unsigned char) ( ( (n) >>  8 ) & 0xFF );    \
    (b)[(i) + 2] = (unsigned char) ( ( (n) >> 16 ) & 0xFF );    \
    (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
}

static void __md5_init(md5_ctx_t *ctx)
{
    memset(ctx, 0, sizeof(md5_ctx_t));
}

static void __md5_free(md5_ctx_t *ctx)
{
    if (ctx == NULL) {
        return;
    }
    __zeroize(ctx, sizeof(md5_ctx_t));
}

static void __md5_starts(md5_ctx_t *ctx)
{
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
}

static void __md5_process(md5_ctx_t *ctx, const unsigned char data[64])
{
    unsigned int X[16], A, B, C, D;

    DGET_UINT32_LE(X[ 0], data,  0);
    DGET_UINT32_LE(X[ 1], data,  4);
    DGET_UINT32_LE(X[ 2], data,  8);
    DGET_UINT32_LE(X[ 3], data, 12);
    DGET_UINT32_LE(X[ 4], data, 16);
    DGET_UINT32_LE(X[ 5], data, 20);
    DGET_UINT32_LE(X[ 6], data, 24);
    DGET_UINT32_LE(X[ 7], data, 28);
    DGET_UINT32_LE(X[ 8], data, 32);
    DGET_UINT32_LE(X[ 9], data, 36);
    DGET_UINT32_LE(X[10], data, 40);
    DGET_UINT32_LE(X[11], data, 44);
    DGET_UINT32_LE(X[12], data, 48);
    DGET_UINT32_LE(X[13], data, 52);
    DGET_UINT32_LE(X[14], data, 56);
    DGET_UINT32_LE(X[15], data, 60);

#define S(x,n) ((x << n) | ((x & 0xFFFFFFFF) >> (32 - n)))

#define P(a,b,c,d,k,s,t)                                \
{                                                       \
    a += F(b,c,d) + X[k] + t; a = S(a,s) + b;           \
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];

#define F(x,y,z) (z ^ (x & (y ^ z)))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
    P( C, D, A, B,  2, 17, 0x242070DB );
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
    P( D, A, B, C,  5, 12, 0x4787C62A );
    P( C, D, A, B,  6, 17, 0xA8304613 );
    P( B, C, D, A,  7, 22, 0xFD469501 );
    P( A, B, C, D,  8,  7, 0x698098D8 );
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
    P( B, C, D, A, 11, 22, 0x895CD7BE );
    P( A, B, C, D, 12,  7, 0x6B901122 );
    P( D, A, B, C, 13, 12, 0xFD987193 );
    P( C, D, A, B, 14, 17, 0xA679438E );
    P( B, C, D, A, 15, 22, 0x49B40821 );

#undef F

#define F(x,y,z) (y ^ (z & (x ^ y)))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
    P( D, A, B, C,  6,  9, 0xC040B340 );
    P( C, D, A, B, 11, 14, 0x265E5A51 );
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
    P( A, B, C, D,  5,  5, 0xD62F105D );
    P( D, A, B, C, 10,  9, 0x02441453 );
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
    P( D, A, B, C, 14,  9, 0xC33707D6 );
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
    P( B, C, D, A,  8, 20, 0x455A14ED );
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
    P( C, D, A, B,  7, 14, 0x676F02D9 );
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );

#undef F

#define F(x,y,z) (x ^ y ^ z)

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
    P( D, A, B, C,  8, 11, 0x8771F681 );
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
    P( B, C, D, A, 14, 23, 0xFDE5380C );
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
    P( D, A, B, C,  0, 11, 0xEAA127FA );
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
    P( B, C, D, A,  6, 23, 0x04881D05 );
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
    P( B, C, D, A,  2, 23, 0xC4AC5665 );

#undef F

#define F(x,y,z) (y ^ (x | ~z))

    P( A, B, C, D,  0,  6, 0xF4292244 );
    P( D, A, B, C,  7, 10, 0x432AFF97 );
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
    P( B, C, D, A,  5, 21, 0xFC93A039 );
    P( A, B, C, D, 12,  6, 0x655B59C3 );
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
    P( B, C, D, A,  1, 21, 0x85845DD1 );
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
    P( C, D, A, B,  6, 15, 0xA3014314 );
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
    P( A, B, C, D,  4,  6, 0xF7537E82 );
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
    P( B, C, D, A,  9, 21, 0xEB86D391 );

#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
}

static void __md5_update(md5_ctx_t *ctx, const unsigned char *input, unsigned int ilen)
{
    unsigned int fill;
    unsigned int left;

    if( ilen == 0 )
        return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (unsigned int) ilen;
    ctx->total[0] &= 0xFFFFFFFF;

    if (ctx->total[0] < (unsigned int) ilen) {
        ctx->total[1]++;
    }

    if (left && ilen >= fill) {
        memcpy((void *) (ctx->buffer + left), input, fill);
        __md5_process(ctx, ctx->buffer);
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while (ilen >= 64) {
        __md5_process( ctx, input );
        input += 64;
        ilen  -= 64;
    }

    if (ilen > 0) {
        memcpy((void *) (ctx->buffer + left), input, ilen);
    }
}

static const unsigned char __g_md5_padding[64] =
{
 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

static void __md5_final(md5_ctx_t *ctx, unsigned char* output)
{
    unsigned int last, padn;
    unsigned int high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    DPUT_UINT32_LE( low,  msglen, 0 );
    DPUT_UINT32_LE( high, msglen, 4 );

    last = ctx->total[0] & 0x3F;
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );

    __md5_update( ctx, __g_md5_padding, padn );
    __md5_update( ctx, msglen, 8 );

    DPUT_UINT32_LE( ctx->state[0], output,  0 );
    DPUT_UINT32_LE( ctx->state[1], output,  4 );
    DPUT_UINT32_LE( ctx->state[2], output,  8 );
    DPUT_UINT32_LE( ctx->state[3], output, 12 );
}

void digest_md5(const unsigned char* message, unsigned int len, unsigned char* digest)
{
    md5_ctx_t ctx;

    __md5_init(&ctx);
    __md5_starts(&ctx);
    __md5_update(&ctx, message, len);
    __md5_final(&ctx, digest);
    __md5_free(&ctx);
}
/*end of native MD5*/

bool UnderlayMessageType::getKey(void* data, InstanceHandle_t* handle) {
  RETURN_VAL_IF((!m_isGetKeyDefined), false);
  UnderlayMessage* p_type = reinterpret_cast<UnderlayMessage*>(data);
  eprosima::fastcdr::FastBuffer fastbuffer(
      reinterpret_cast<char*>(m_keyBuffer),
      UnderlayMessage::getKeyMaxCdrSerializedSize());  // Object that manages
                                                       // the raw buffer.
  eprosima::fastcdr::Cdr ser(
      fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);  // Object that
                                                            // serializes the
                                                            // data.
  p_type->serializeKey(ser);
  if (UnderlayMessage::getKeyMaxCdrSerializedSize() > 16) {
#if 0
    m_md5.init();
    m_md5.update(m_keyBuffer, (unsigned int)ser.getSerializedDataLength());
    m_md5.finalize();
    for (uint8_t i = 0; i < 16; ++i) {
      handle->value[i] = m_md5.digest[i];
    }
#else
    unsigned char digest[16] = {0};
    digest_md5((const unsigned char*) m_keyBuffer, 
      (unsigned int) ser.getSerializedDataLength(), 
      digest);
    for (uint8_t i = 0; i < 16; ++i) {
      handle->value[i] = digest[i];
    }
#endif
  } else {
    for (uint8_t i = 0; i < 16; ++i) {
      handle->value[i] = m_keyBuffer[i];
    }
  }
  return true;
}

}  // namespace transport
}  // namespace cyber
}  // namespace apollo
