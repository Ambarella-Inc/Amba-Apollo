--- cc/defs.bzl  
+++ cc/defs.bzl
@@ -26,6 +26,143 @@ def _add_tags(attrs):
         attrs["tags"] = [_MIGRATION_TAG]
     return attrs
 
+def _select2dict(select_str):
+    result = dict()
+    cxt_str = select_str[:-2].replace("select({","")
+    for kv_str in cxt_str.split("],"):
+      k_str, v_str = kv_str.strip().split(": [")
+      if "" == v_str.strip() or "]" == v_str.strip():
+        result[k_str.strip()[1:-1]] = []
+      else:
+        v_list = []
+        v_cxt = v_str.strip()
+        if v_cxt[-1] == "]":
+          v_cxt = v_str.strip()[:-1]
+        for v_v in v_cxt.split(","):
+          v_list.append(v_v.strip()[1:-1])
+        result[k_str.strip()[1:-1]] = v_list
+    
+    return result
+
+def _list_str2list(list_str):
+    result = []
+    cxt = list_str[1:-1]
+    for l_str in cxt.strip().split(","):
+      result.append(l_str.strip()[1:-1])
+    return result
+
+def _replace_deps(deps_list, srcs_dict):
+
+    for i in range(len(deps_list)):
+        if "@" not in deps_list[i]:
+            continue
+        else:
+            if ":" in deps_list[i]:
+                continue
+            else:
+                lib_name = deps_list[i].replace("//", "").replace("@", "")
+                deps_list[i] = deps_list[i] + "//:" + lib_name
+  
+    need_remove = {}
+    current_deps = {}
+
+    for i in deps_list:
+        for src in srcs_dict:
+            if i.startswith(src):
+                if i == src:
+                    need_remove[i] = srcs_dict[src]
+                    break
+                else:
+                    if i[len(src)] == "/" or i[len(src)] == ":":
+                        need_remove[i] = srcs_dict[src]
+                        break
+
+    for i in range(len(deps_list)):
+        if deps_list[i] in need_remove:
+            deps_list[i] = need_remove[deps_list[i]]
+        current_deps[deps_list[i]] = deps_list[i]
+    
+    new_deps = [] + deps_list
+
+    deps_map = {}
+    for i in new_deps:
+        deps_map[i] = i
+    new_deps = [i for i in deps_map]
+
+    return new_deps
+
+def _get_workspace_deps(current_deps_dict, workspace_deps):
+    ws_deps = []
+    for dep in workspace_deps:
+        if dep not in current_deps_dict:
+            ws_deps.append(dep)
+    return ws_deps
+
+def _process_apollo_deps(attrs):
+    # only do this action for targets in current WORKSPACE 
+    if native.repository_name() != "@":
+        return attrs
+    if "deps" not in attrs or attrs["deps"] == None:
+        return attrs
+    deps = attrs["deps"]
+
+    # e.g. SRC_REPLACEMENT=//third_party/ipopt=@apollo-neo-3rd-ipopt-dev,//third_party/ad_rss_lib=@apollo-neo-3rd-ad-rss-dev
+    # e.g. GEN_WS_DEPS=@boost,@apollo-neo-monitor-dev
+    src_replaces = "@@SRC_REPLACEMENT@@".split(",")
+    workspace_deps = "@@GEN_WS_DEPS@@".split(",")
+
+    srcs_dict = {}
+    for s in src_replaces:
+        if "=" not in s:
+            continue
+        replace_dep = s.split("=")[0]
+        replace_value = s.split("=")[1]
+        srcs_dict[replace_dep] = replace_value
+
+    current_deps_dict = {}
+    ret_deps_list = []
+    if type(deps) == "select":
+      for group_str in str(deps).strip().split(" + "):
+        if "select({" in group_str.strip():
+          s_deps_dict = _select2dict(group_str.strip())
+          for k, v in s_deps_dict.items():
+            if type(v) == "list":
+              s_deps_dict[k] = _replace_deps(v, srcs_dict)
+
+              for i in s_deps_dict[k]:
+                current_deps_dict[i] = i
+
+          ret_deps_list.append(select(s_deps_dict))
+        else:
+          l_deps_str = group_str.strip()
+          l_deps_list = _list_str2list(l_deps_str)
+          ret_deps = _replace_deps(l_deps_list, srcs_dict)
+
+          for dep in ret_deps:
+            current_deps_dict[dep] = dep
+
+          ret_deps_list.append(ret_deps)
+      
+      ret_deps_list.append(_get_workspace_deps(current_deps_dict, workspace_deps))
+
+      n_deps = []
+      for d in ret_deps_list:
+        n_deps += d
+
+      # print(n_deps)
+      attrs["deps"] = n_deps
+      
+      return attrs
+    elif type(deps) == "list":
+      replaced_deps = _replace_deps(deps, srcs_dict)
+      for dep in replaced_deps:
+        current_deps_dict[dep] = dep
+      ws_deps = _get_workspace_deps(current_deps_dict, workspace_deps)
+      attrs["deps"] = replaced_deps + ws_deps
+      return attrs
+    else:
+      return attrs
+
 def cc_binary(**attrs):
     """Bazel cc_binary rule.
 
@@ -36,7 +173,7 @@ def cc_binary(**attrs):
     """
 
     # buildifier: disable=native-cc
-    native.cc_binary(**_add_tags(attrs))
+    native.cc_binary(**_add_tags(_process_apollo_deps(attrs)))
 
 def cc_test(**attrs):
     """Bazel cc_test rule.
@@ -48,7 +185,7 @@ def cc_test(**attrs):
     """
 
     # buildifier: disable=native-cc
-    native.cc_test(**_add_tags(attrs))
+    native.cc_test(**_add_tags(_process_apollo_deps(attrs)))
 
 def cc_library(**attrs):
     """Bazel cc_library rule.
@@ -60,7 +197,7 @@ def cc_library(**attrs):
     """
 
     # buildifier: disable=native-cc
-    native.cc_library(**_add_tags(attrs))
+    native.cc_library(**_add_tags(_process_apollo_deps(attrs)))
 
 def cc_import(**attrs):
     """Bazel cc_import rule.
